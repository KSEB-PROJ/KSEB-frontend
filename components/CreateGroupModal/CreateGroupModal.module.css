/* 키프레임 */
@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
@keyframes fadeOut { from { opacity: 1; } to { opacity: 0; } }

@keyframes popIn {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
}
@keyframes popOut {
    from { opacity: 1; transform: scale(1); }
    to { opacity: 0; transform: scale(0.95); }
}

/*  버튼 배경 그라데이션 키프레임 */
@keyframes moveGradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}


/* 모달 오버레이 */
.modalOverlay {
    --theme-hue: 271;
    --theme-saturation: 100%;
    --theme-lightness: 50%;
    --theme-color-hsl: var(--theme-hue), var(--theme-saturation), var(--theme-lightness);
    --theme-color: hsl(var(--theme-color-hsl));

    position: fixed;
    inset: 0;
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    background: rgba(18, 18, 18, 0.7);
    backdrop-filter: blur(16px);
    animation: fadeIn 0.4s ease-out forwards;
}
.modalOverlay.closing {
    animation: fadeOut 0.3s ease-out forwards;
}

/* 모달 컨텐츠 */
.modalContent {
    width: 100%;
    max-width: 500px;
    border-radius: 20px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    padding: 2rem;
    background: radial-gradient(ellipse at 50% -50%, hsla(var(--theme-hue), 30%, 20%, 0.7), transparent 80%),
                #1c1c1c;
    animation: popIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    transition: background 0.8s ease;
}
.modalContent.closing {
    animation: popOut 0.3s cubic-bezier(0.7, 0, 0.84, 0) forwards;
}

.closeButton {
    position: absolute;
    top: 1.25rem;
    right: 1.25rem;
    z-index: 20;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: #aaa;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
}
.closeButton:hover {
    background: var(--theme-color);
    color: #fff;
    transform: rotate(90deg) scale(1.1);
}

/* 헤더 & 뒤로가기 버튼 */
.header {
    text-align: center;
    position: relative;
    padding: 0 2rem;
}
.header h2 { margin: 0; font-weight: 600; }
.header.hasBackButton { text-align: left; }
.backButton {
    position: absolute;
    left: -0.5rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #aaa;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.5rem;
}
.backButton:hover { color: var(--theme-color); }

.contentContainer {
    margin-top: 1.5rem;
    display: grid;
}
.view {
    grid-area: 1 / 1;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    pointer-events: none;
    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}
.view.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: all;
}

.description {
    text-align: center;
    color: #a0a0a0;
    margin-bottom: 2rem;
}

.selectionContainer {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.selectionCard {
    background: rgba(35, 35, 35, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 1.5rem;
    text-align: left;
    color: #fff;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: transform 0.3s ease, border-color 0.3s ease;
}

.selectionCard::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 250px;
    height: 250px;
    background-image: radial-gradient(circle, hsla(var(--theme-hue), 80%, 70%, 0.1), transparent 70%);
    transform: translate(-50%, -50%);
    filter: blur(50px);
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: 0;
}

.cardContentWrapper {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

.selectionCard:hover {
    transform: translateY(-5px);
    border-color: hsla(var(--theme-hue), 80%, 70%, 0.3);
}

.selectionCard:hover::before {
    opacity: 1;
}

.cardIcon {
    font-size: 1.2rem;
    color: #fff;
    background: hsla(var(--theme-hue), 90%, 65%, 0.4);
    border: 1px solid hsla(var(--theme-hue), 90%, 65%, 0.6);
    width: 40px;
    height: 40px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.2rem;
    transition: all 0.3s ease;
}

.selectionCard:hover .cardIcon {
    background: hsla(var(--theme-hue), 95%, 60%, 0.7);
    border-color: hsla(var(--theme-hue), 95%, 60%, 1);
    transform: scale(1.05);
}

.selectionCard h3 {
    margin: 0 0 0.25rem;
    font-size: 1.2rem;
    font-weight: 600;
}

.selectionCard p {
    margin: 0;
    color: #b0b0b0;
    font-size: 0.9rem;
    line-height: 1.5;
}

/* 폼 */
.formContent .description {
    text-align: left;
    margin-bottom: 1.5rem;
}
.inputGroup {
    position: relative;
    margin-bottom: 2rem;
}
.inputGroup input {
    width: 100%;
    background: #1e1e1e;
    border: 1px solid #555;
    border-radius: 8px;
    padding: 1rem;
    color: #fff;
    font-size: 1rem;
    outline: none;
    transition: all 0.2s;
}
.inputGroup label {
    position: absolute;
    top: 1rem;
    left: 1rem;
    color: #999;
    pointer-events: none;
    transition: all 0.2s ease;
    background: #1e1e1e;
    padding: 0 0.25rem;
}
.inputGroup .staticLabel {
    position: static;
    display: block;
    background: none;
    padding: 0;
    margin-bottom: 1rem;
    color: #ccc;
    font-weight: 500;
}
.inputGroup input:focus + label,
.inputGroup input:not(:placeholder-shown) + label {
    top: -0.75rem;
    left: 0.75rem;
    font-size: 0.8rem;
    color: var(--theme-color);
    background: #1c1c1c; 
}
.inputGroup input:focus {
    border-color: var(--theme-color);
    box-shadow: 0 0 0 3px hsla(var(--theme-hue), var(--theme-saturation), var(--theme-lightness), 0.2);
}

/* 색상 선택기 */
.colorSelector {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
}
.colorOrb {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    padding: 0;
    position: relative;
    transition: all 0.2s cubic-bezier(0.16, 1, 0.3, 1);
}
.colorOrb::after {
    content: '';
    position: absolute;
    inset: -4px;
    border-radius: 50%;
    border: 2px solid transparent;
    transition: border-color 0.2s ease;
}
.colorOrb.selected::after {
    border-color: var(--theme-color);
}
.colorOrb:hover {
    transform: scale(1.2);
}

/* 제출 버튼 스타일 */
.submitButton {
    width: 100%;
    padding: 1rem;
    margin-top: 1rem;
    border: none;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.9);
    cursor: pointer;

    /* 그라데이션 배경을 위한 설정 */
    background: linear-gradient(
        110deg,
        hsl(var(--theme-hue), calc(var(--theme-saturation) * 0.9), calc(var(--theme-lightness) * 0.8)) 0%,
        hsl(var(--theme-hue), calc(var(--theme-saturation) * 1.0), calc(var(--theme-lightness) * 0.6)) 50%,
        hsl(var(--theme-hue), calc(var(--theme-saturation) * 0.9), calc(var(--theme-lightness) * 0.8)) 100%
    );
    background-size: 200% 100%;
    
    /* 그림자와 전환 효과 */
    box-shadow: 0 4px 15px hsla(var(--theme-hue), var(--theme-saturation), var(--theme-lightness), 0.2);
    transition: all 0.3s ease;
    animation: moveGradient 8s ease infinite;

    /* 내부 컨텐츠 정렬 */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* 버튼 내부 span (텍스트 + 아이콘) 스타일 */
.submitButton span {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: transform 0.3s ease;
}

/* 화살표 아이콘을 가상 요소로 추가 */
.submitButton span::after {
    content: '→';
    font-weight: 400;
    transition: transform 0.2s cubic-bezier(0.16, 1, 0.3, 1);
    display: inline-block;
}

/* 버튼 호버 효과 */
.submitButton:hover {
    color: #fff;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px hsla(var(--theme-hue), var(--theme-saturation), var(--theme-lightness), 0.4);
    animation-duration: 4s; /* 호버 시 애니메이션 속도 증가 */
}

/* 호버 시 화살표 아이콘 이동 */
.submitButton:hover span::after {
    transform: translateX(4px);
}